apiVersion: "v1"
kind: "Service"
metadata:
  name: "thanos-prometheus"
spec:
  selector:
    app.kubernetes.io/name: "thanos-prometheus"
  ports:
    - name: "http"
      port: 9090
      protocol: "TCP"
      targetPort: 9090
    - name: "grpc"
      port: 10901
      protocol: "TCP"
      targetPort: 10901

---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "thanos-prometheus"
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app.kubernetes.io/name: "thanos-prometheus"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "thanos-prometheus"
        required.storage: "s3"
      annotations:
        promtail.io/collect: "true"
    spec:
      terminationGracePeriodSeconds: 120
      serviceAccountName: "thanos-prometheus"
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsGroup: 65534
      volumes:
        - name: "prometheus-config"
          configMap:
            name: "thanos-prometheus-config"
        - name: "thanos-config"
          configMap:
            name: "thanos-store-config"
        - name: "prometheus-data"
          persistentVolumeClaim:
            claimName: "thanos-prometheus-data"
      containers:
        - name: "prometheus"
          image: "prom/prometheus:latest"
          imagePullPolicy: "IfNotPresent"
          args:
            - "--web.enable-remote-write-receiver"
            - "--web.enable-lifecycle"
            - "--storage.tsdb.min-block-duration=2h"
            - "--storage.tsdb.max-block-duration=2h"
            - "--storage.tsdb.path=/prometheus"
            - "--config.file=/etc/prometheus/prometheus.yml"
          volumeMounts:
            - name: "prometheus-config"
              mountPath: "/etc/prometheus"
            - name: "prometheus-data"
              mountPath: "/prometheus"
          ports:
            - name: "http"
              protocol: "TCP"
              containerPort: 9090
          resources:
            requests:
              memory: "720Mi"
            limits:
              memory: "720Mi"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 5
            httpGet:
              path: "/-/healthy"
              port: "http"
              scheme: "HTTP"
          readinessProbe:
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 5
            httpGet:
              path: "/-/ready"
              port: "http"
              scheme: "HTTP"

        - name: "thanos"
          image: "thanosio/thanos:latest"
          imagePullPolicy: "IfNotPresent"
          args:
            - "sidecar"
            - "--log.level=info"
            - "--log.format=logfmt"
            - "--grpc-address=0.0.0.0:10901"
            - "--http-address=0.0.0.0:10902"
            - "--tsdb.path=/prometheus"
            - "--shipper.upload-compacted"
            - "--prometheus.url=http://127.0.0.1:9090"
            - "--objstore.config-file=/etc/thanos/thanos-store.yml"
          volumeMounts:
            - name: "thanos-config"
              mountPath: "/etc/thanos"
            - name: "prometheus-data"
              mountPath: "/prometheus"
          ports:
            - name: "grpc"
              protocol: "TCP"
              containerPort: 10901
            - name: "http"
              protocol: "TCP"
              containerPort: 10902
          resources:
            requests:
              memory: "128Mi"
            limits:
              memory: "128Mi"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 5
            httpGet:
              path: "/-/healthy"
              port: "http"
              scheme: "HTTP"
          readinessProbe:
            initialDelaySeconds: 20
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 5
            httpGet:
              path: "/-/ready"
              port: "http"
              scheme: "HTTP"
